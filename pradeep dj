#include <iostream>
#include <vector>
#include <queue>
#include <limits.h>
#include <algorithm> // Include this for std::reverse

using namespace std;

// Define a pair type for distance and vertex
typedef pair<int, int> pii; 

// Define a type for the graph using an adjacency list
typedef vector<vector<pii>> Graph; 

// Function to implement Dijkstra's Algorithm
void dijkstra(const Graph& graph, int source, int destination) {
    int n = graph.size();
    vector<int> dist(n, INT_MAX);   // Distance from source to each vertex
    vector<int> parent(n, -1);      // Parent array to store the shortest path tree
    priority_queue<pii, vector<pii>, greater<pii>> pq; // Min-heap priority queue

    // Initialize the source vertex
    dist[source] = 0;
    pq.push({0, source});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        // Stop if we reach the destination
        if (u == destination) break;

        // Relaxation step for all neighbors of vertex u
        for (const auto& neighbor : graph[u]) {
            int v = neighbor.first;
            int weight = neighbor.second;

            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                pq.push({dist[v], v});
                parent[v] = u;
            }
        }
    }

    // Output the shortest path cost
    cout << "Shortest path cost from " << source << " to " << destination << " is: " << dist[destination] << endl;

    // Output the shortest path
    vector<int> path;
    for (int v = destination; v != -1; v = parent[v])
        path.push_back(v);
    reverse(path.begin(), path.end());

    cout << "Path: ";
    for (int v : path)
        cout << v << " ";
    cout << endl;
}

int main() {
    int n, m;
    cout << "Enter the number of vertices and edges: ";
    cin >> n >> m;

    Graph graph(n);
    cout << "Enter the edges (source, destination, weight):" << endl;
    for (int i = 0; i < m; ++i) {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u].push_back({v, w});
        graph[v].push_back({u, w}); // If the graph is undirected
    }

    int source, destination;
    cout << "Enter the source and destination vertices: ";
    cin >> source >> destination;

    dijkstra(graph, source, destination);

    return 0;
}
